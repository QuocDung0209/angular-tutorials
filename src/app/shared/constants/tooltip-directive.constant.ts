export const TOOLTIP_TS = "import {\n  Directive,\n  Input,\n  ElementRef,\n  HostListener,\n  Renderer2,\n  SecurityContext,\n} from '@angular/core';\nimport { DomSanitizer } from \"@angular/platform-browser\";\nimport { createPopper, Placement } from '@popperjs/core';\n\n@Directive({\n  selector: '[tooltip]'\n})\nexport class TooltipDirective {\n  @Input('tooltip')\n  tooltipTitle!: string; // tooltipTitle may be string or HTML element\n  @Input()\n  placement: Placement = 'top';\n  @Input()\n  delay: string | any;\n  tooltip: HTMLElement | any;\n  // Distance between host element and tooltip element\n  offset = 10;\n  // Allow HTML in the tooltip.\n  @Input() htmlTooltip: boolean = false;\n\n  constructor(\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private sanitizer: DomSanitizer\n  ) { }\n\n  @HostListener('mouseenter') onMouseEnter() {\n    if (!this.tooltip) { this.show(); }\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    if (this.tooltip) { this.hide(); }\n  }\n\n  show() {\n    this.create();\n    this.setPositionByPopper();\n    this.renderer.addClass(this.tooltip, 'ng-tooltip-show');\n  }\n\n  hide() {\n    this.renderer.removeClass(this.tooltip, 'ng-tooltip-show');\n    window.setTimeout(() => {\n      this.renderer.removeChild(document.body, this.tooltip);\n      this.tooltip = null;\n    }, this.delay);\n  }\n\n  create() {\n    this.tooltip = this.renderer.createElement('span');\n\n    if (this.htmlTooltip) {\n      this.renderer.setProperty(\n        this.tooltip,\n        'innerHTML',\n        this.sanitizer.sanitize(SecurityContext.HTML, this.tooltipTitle)\n      );\n    } else {\n      this.renderer.appendChild(\n        this.tooltip,\n        this.renderer.createText(this.tooltipTitle) // textNode\n      );\n    }\n\n    this.renderer.appendChild(document.body, this.tooltip);\n    // this.renderer.appendChild(this.el.nativeElement, this.tooltip);\n\n    this.renderer.addClass(this.tooltip, 'ng-tooltip');\n    // this.renderer.addClass(this.tooltip, `ng-tooltip-${this.placement}`);\n\n    // delay setting\n    this.renderer.setStyle(this.tooltip, '-webkit-transition', `opacity ${this.delay}ms`);\n    this.renderer.setStyle(this.tooltip, '-moz-transition', `opacity ${this.delay}ms`);\n    this.renderer.setStyle(this.tooltip, '-o-transition', `opacity ${this.delay}ms`);\n    this.renderer.setStyle(this.tooltip, 'transition', `opacity ${this.delay}ms`);\n  }\n\n  setPosition() {\n    // The Element.getBoundingClientRect() method returns a DOMRect object\n    // providing information about the size of an element and its position relative to the viewport.\n\n    // Host element size and position information\n    const hostPos = this.el.nativeElement.getBoundingClientRect();\n\n    // Tooltip element size and position information\n    const tooltipPos = this.tooltip.getBoundingClientRect();\n\n    // window's scroll top\n    // The getBoundingClientRect method returns the relative position in the viewport.\n    // When scrolling occurs, the vertical scroll coordinate value should be reflected on the top of the tooltip element.\n    const scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n\n    let top, left;\n\n    if (this.placement === 'top') {\n      top = hostPos.top - tooltipPos.height - this.offset;\n      left = hostPos.left + (hostPos.width - tooltipPos.width) / 2;\n    }\n\n    if (this.placement === 'bottom') {\n      top = hostPos.bottom + this.offset;\n      left = hostPos.left + (hostPos.width - tooltipPos.width) / 2;\n    }\n\n    if (this.placement === 'left') {\n      top = hostPos.top + (hostPos.height - tooltipPos.height) / 2;\n      left = hostPos.left - tooltipPos.width - this.offset;\n    }\n\n    if (this.placement === 'right') {\n      top = hostPos.top + (hostPos.height - tooltipPos.height) / 2;\n      left = hostPos.right + this.offset;\n    }\n\n    // When scrolling occurs, the vertical scroll coordinate value should be reflected on the top of the tooltip element.\n    // If we don't plus scrollPos, when the scroll happens, the position of the tooltip will be incorrect.\n    // Because Element.getBoundingClientRect() returns its position according to the viewport\n    this.renderer.setStyle(this.tooltip, 'top', `${top + scrollPos}px`);\n    this.renderer.setStyle(this.tooltip, 'left', `${left}px`);\n  }\n\n  setPositionByPopper() {\n    createPopper(this.el.nativeElement, this.tooltip, {\n      placement: this.placement,\n      modifiers: [\n        {\n          name: 'offset',\n          options: {\n            offset: [0, this.offset],\n          },\n        },\n      ],\n    });\n  }\n}";

export const TOOLTIP_CSS = ".ng-tooltip {\n  position: absolute;\n  max-width: 150px;\n  font-size: 14px;\n  text-align: center;\n  color: #f8f8f2;\n  padding: 3px 8px;\n  background: #282a36;\n  border-radius: 4px;\n  z-index: 1000;\n  opacity: 0;\n}\n.ng-tooltip:after {\n  content: \"\";\n  position: absolute;\n  border-style: solid;\n}\n.ng-tooltip[data-popper-placement^=\"top\"]:after,\n.ng-tooltip-top:after {\n  top: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px;\n  border-color: black transparent transparent transparent;\n}\n.ng-tooltip[data-popper-placement^=\"bottom\"]:after,\n.ng-tooltip-bottom:after {\n  bottom: 100%;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px;\n  border-color: transparent transparent black transparent;\n}\n.ng-tooltip[data-popper-placement^=\"left\"]:after,\n.ng-tooltip-left:after {\n  top: 50%;\n  left: 100%;\n  margin-top: -5px;\n  border-width: 5px;\n  border-color: transparent transparent transparent black;\n}\n.ng-tooltip[data-popper-placement^=\"right\"]:after,\n.ng-tooltip-right:after {\n  top: 50%;\n  right: 100%;\n  margin-top: -5px;\n  border-width: 5px;\n  border-color: transparent black transparent transparent;\n}\n.ng-tooltip-show {\n  opacity: 1;\n}";

export const HTML_TOOLTIP = "<div>\n  <i class=\"fa fa-thumbs-up fa-2x p-2\" aria-hidden=\"true\"></i>&nbsp;\n  <span>This is a tooltip directive with <b style=\"text-decoration: underline;\">HTML</b> input.</span>\n</div>";